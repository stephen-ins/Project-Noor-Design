{% extends 'base.admin.html.twig' %}

{% block title %}Noor Design | Admin
{% endblock %}

{# AFFICHAGE DE LA PAGE ADMINISTRATION DU SITE --> PRODUITS #}

{% block content %}
	<!-- Main content -->
	<main
		class="flex-1 p-6">
		<!-- Header -->
		<div class="flex justify-between items-center border-b pb-4 mb-6">
			<h1 class="text-2xl font-semibold">Gestion des Produits</h1>
			<button id="openAddProductModal" class="bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded flex items-center shadow-sm transition duration-150 ease-in-out">
				<i class="bi bi-plus mr-2"></i>
				Ajouter un produit
			</button>
		</div>

		<!-- Message d'erreur ou de succès pour ajout, modification ou suppression -->
		{% if app.session.flashBag.has('success') %}
			<div class="bg-green-100 text-green-800 p-4 rounded-lg mb-6">
				{{ app.session.flashBag.get('success')[0] }}
			</div>
		{% endif %}
		{% if app.session.flashBag.has('error') %}
			<div class="bg-red-100 text-red-800 p-4 rounded-lg mb-6">
				{{ app.session.flashBag.get('error')[0] }}
			</div>
		{% endif %}


		<!-- Tableau des produits -->
		<div class="bg-white rounded-lg shadow-sm overflow-hidden">
			<table id="products-table" class="w-full text-left">
				<thead class="bg-gray-50">
					<tr>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nom</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Catégorie</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prix</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
						<th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
					</tr>
				</thead>
				<tbody class="bg-white divide-y divide-gray-200">
					{% if products is defined and products is not empty %}
						{% for product in products %}
							<tr class="hover:bg-gray-50">
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{ product.id }}</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="flex-shrink-0 h-10 w-10">
										{% if product.image is defined and product.image is not empty %}
											<img class="h-10 w-10 rounded-full object-cover" src="{{ asset('uploads/products/' ~ product.image) }}" alt="{{ product.nom }}">
										{% else %}
											<div class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
												<i class="bi bi-image text-gray-400"></i>
											</div>
										{% endif %}
									</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="text-sm font-medium text-gray-900">{{ product.nom }}</div>
									<div class="text-xs text-gray-500">Réf: {{ product.id }}</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									{{ product.categorie.nom|default('Non catégorisé') }}
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="text-sm text-gray-900">{{ product.prix|format_currency('EUR', {fraction_digit: 2}) }}</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									{% if product.stock > 10 %}
										<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
											{{ product.stock }}
										</span>
									{% elseif product.stock > 0 %}
										<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
											{{ product.stock }}
										</span>
									{% else %}
										<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
											En rupture
										</span>
									{% endif %}
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									{% if product.active %}
										<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Actif</span>
									{% else %}
										<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">Inactif</span>
									{% endif %}
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-center">
									<div class="flex justify-center space-x-2">
										<a href="#" class="text-blue-600 hover:text-blue-900">
											<i class="bi bi-eye" title="Voir"></i>
										</a>
										<a href="{{ path('app_admin_products_edit', {'id': product.id}) }}" class="text-amber-600 hover:text-amber-900">
											<i class="bi bi-pencil" title="Modifier"></i>
										</a>
										<button class="delete-product-btn text-red-600 hover:text-red-900" data-product-id="{{ product.id }}" data-product-name="{{ product.nom }}">
											<i class="bi bi-trash" title="Supprimer"></i>
										</button>
									</div>
								</td>
							</tr>
						{% endfor %}
					{% else %}
						<tr>
							<td colspan="8" class="px-6 py-4 text-center text-gray-500">Aucun produit trouvé</td>
						</tr>
					{% endif %}
				</tbody>
			</table>
		</div>

		<!-- Modale d'ajout de produit -->
		<div id="addProductModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
			<div class="bg-white rounded-lg shadow-lg w-4/5 h-4/5 mx-auto overflow-auto">
				<div class="sticky top-0 bg-white border-b px-6 py-3 flex justify-between items-center">
					<h3 class="text-xl font-semibold">Ajouter un nouveau produit</h3>
					<button id="closeAddModal" class="text-gray-500 hover:text-gray-700">
						<i class="bi bi-x-lg"></i>
					</button>
				</div>
				<div class="p-6">
					{# Formulaire Symfony pour l'ajout #}
					{{ form_start(formProduct, {'attr': {'id': 'addProductForm', 'action': path('app_admin_products_add')}}) }}
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4"> <div class="col-span-1 md:col-span-2">
							<div class="mb-4 flex items-center">
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-1">Image principale</label>
									{{ form_widget(formProduct.image, {'attr': {'class': 'w-full text-sm', 'accept': 'image/*', 'id': 'newProductImage'}}) }}
									{{ form_errors(formProduct.image) }}
								</div>
							</div>
						</div>

						{# Bloc images additionnelles #}
						<div class="col-span-1 md:col-span-2">
							<label class="block text-sm font-medium text-gray-700 mb-1">Images additionnelles (2 & 3)</label>
							{{ form_widget(formProduct.additionalImages, {'attr': {'class': 'w-full text-sm', 'accept': 'image/*', 'multiple': true, 'id': 'newProductAdditionalImages'}}) }}
							<small class="text-gray-500">Vous pouvez sélectionner jusqu'à 2 images additionnelles en même temps</small>
							{{ form_errors(formProduct.additionalImages) }}
						</div>

						{# Champs du formulaire #}
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Nom du produit</label>
							{{ form_widget(formProduct.nom, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductName'}}) }}
							{{ form_errors(formProduct.nom) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Catégorie</label>
							{{ form_widget(formProduct.categorie, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductCategory'}}) }}
							{{ form_errors(formProduct.categorie) }}
						</div>
						<div class="col-span-1 md:col-span-2">
							<label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
							{{ form_widget(formProduct.description, {'attr': {'rows': 4, 'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductDescription'}}) }}
							{{ form_errors(formProduct.description) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Matière</label>
							{{ form_widget(formProduct.materiaux, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductMaterial'}}) }}
							{{ form_errors(formProduct.materiaux) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Taille</label>
							{{ form_widget(formProduct.taille, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductSize'}}) }}
							{{ form_errors(formProduct.taille) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Poids (Grammes)</label>
							{{ form_widget(formProduct.poids, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductWeight', 'placeholder': 'Poids en grammes'}}) }}
							{{ form_errors(formProduct.poids) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Prix (€)</label>
							{{ form_widget(formProduct.prix, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductPrice', 'min': 0, 'step': 0.01 }}) }}
							{{ form_errors(formProduct.prix) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Stock</label>
							{{ form_widget(formProduct.stock, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductStock', 'min': 0 , 'placeholder': 'Insérer le stock actuel'}}) }}
							{{ form_errors(formProduct.stock) }}
						</div>
						
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">État du produit</label>
							{{ form_widget(formProduct.active, {'attr': {'class': 'mt-1', 'id': 'newProductActive'}}) }}
							{{ form_errors(formProduct.active) }}
						</div>

						{# Date d ajout en masque #}
						<div class="hidden">
							<label class="block text-sm font-medium text-gray-700 mb-1">Date d'ajout</label>
							{{ form_widget(formProduct.date_ajout, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductDateAdded'}}) }}
							{{ form_errors(formProduct.date_ajout) }}
						</div>


						<div class="flex justify-center w-full space-x-3 border-t pt-4 bottom-0 bg-white">
							<button type="button" id="cancelAdd" class="px-4 py-2 border rounded hover:bg-gray-100">
								Annuler
							</button>
							<button type="submit" class="px-4 py-2 bg-amber-600 text-white rounded hover:bg-amber-700">
								Ajouter le produit
							</button>
						</div>

						{{ form_end(formProduct) }}
					</div>
				</div>		</div>
	</div>
	
	<!-- Modale de suppression de produit -->
	<div id="deleteProductModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
			<div class="bg-white rounded-lg shadow-lg p-6 max-w-md mx-auto">
				<div class="text-center">
					<h3 class="text-xl font-semibold mb-4">Confirmer la suppression</h3>
					<p class="mb-6">Êtes-vous sûr de vouloir supprimer le produit "<span id="productNameToDelete"></span>" ? Cette action est irréversible.</p>

					<form id="deleteProductForm" method="POST" action="{{ path('app_admin_products_delete') }}">
						<input type="hidden" name="_token" id="deleteProductToken" value="{{ csrf_token('delete_product') }}">

						<div class="flex justify-center space-x-4">
							<button type="button" id="cancelDeleteProduct" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded">
								Annuler
							</button>
							<button type="submit" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded">
								Supprimer
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>

	</main>
{% endblock %}
{% block javascripts %}
	{{ parent() }}
	<script>
		document.addEventListener('DOMContentLoaded', function () {
    // Initialisation de DataTables pour le tableau des produits
    let productsTable = $('#products-table').DataTable({
        language: {
            url: 'https://cdn.datatables.net/plug-ins/1.13.7/i18n/fr-FR.json',
        },
        responsive: true,
        pageLength: 10,
        lengthMenu: [[5, 10, 25, 50, -1], [5, 10, 25, 50, "Tous"]],
        dom: '<"top"lf>rt<"bottom"ip>',
        columnDefs: [
            { "orderable": false, "targets": [1, 7] } // Désactive le tri sur les colonnes Image et Actions
        ],
        order: [[0, 'desc']], // Tri par défaut sur l'ID (descendant)
        language: {
            processing:     "Traitement en cours...",
            search:         "Rechercher&nbsp;:",
            lengthMenu:     "Afficher _MENU_ produits",
            info:           "Affichage de _START_ à _END_ sur _TOTAL_ produits",
            infoEmpty:      "Affichage de 0 à 0 sur 0 produit",
            infoFiltered:   "(filtré de _MAX_ produits au total)",
            infoPostFix:    "",
            loadingRecords: "Chargement en cours...",
            zeroRecords:    "Aucun produit à afficher",
            emptyTable:     "Aucune donnée disponible",
            paginate: {
                first:      "Premier",
                previous:   "Précédent",
                next:       "Suivant",
                last:       "Dernier"
            },
            aria: {
                sortAscending:  ": activer pour trier la colonne par ordre croissant",
                sortDescending: ": activer pour trier la colonne par ordre décroissant"
            }
        },
        initComplete: function() {
            // Ajout d'un filtre de catégorie personnalisé
            this.api().columns(3).every(function() {
                var column = this;
                var select = $('<select class="ml-2 border rounded-lg px-2 py-1"><option value="">Toutes les catégories</option></select>')
                    .appendTo($('.top'))
                    .on('change', function() {
                        var val = $.fn.dataTable.util.escapeRegex($(this).val());
                        column.search(val ? val : '', true, false).draw();
                    });

                // Collecte des valeurs uniques de catégorie
                var categories = [];
                column.nodes().each(function(cell) {
                    var categoryText = $(cell).text().trim();
                    if (!categories.includes(categoryText)) {
                        categories.push(categoryText);
                    }
                });

                // Ajout des options au select
                categories.sort().forEach(function(category) {
                    select.append('<option value="' + category + '">' + category + '</option>');
                });
            });

            // Ajout d'un filtre de statut personnalisé
            this.api().columns(6).every(function() {
                var column = this;
                var select = $('<select class="ml-2 border rounded-lg px-2 py-1"><option value="">Tous les statuts</option></select>')
                    .appendTo($('.top'))
                    .on('change', function() {
                        var val = $.fn.dataTable.util.escapeRegex($(this).val());
                        column.search(val ? val : '', true, false).draw();
                    });

                // Ajout des options au select
                select.append('<option value="Actif">Actif</option>');
                select.append('<option value="Inactif">Inactif</option>');
            });
        }
    });

    // Récupération des éléments de la modale d'ajout
    const addModal = document.getElementById('addProductModal');
    const openAddProductModal = document.getElementById('openAddProductModal');
    const closeAddModal = document.getElementById('closeAddModal');
    const cancelAdd = document.getElementById('cancelAdd');
    
    // Récupération des éléments de la modale de suppression
    const deleteModal = document.getElementById('deleteProductModal');
    const cancelDeleteProduct = document.getElementById('cancelDeleteProduct');
    const deleteButtons = document.querySelectorAll('.delete-product-btn');
    const deleteForm = document.getElementById('deleteProductForm');
    const productNameToDelete = document.getElementById('productNameToDelete');
    const deleteProductToken = document.getElementById('deleteProductToken');
    
    // Ajouter un écouteur d'événement à chaque bouton de suppression
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Récupérer les données du produit depuis les attributs data-*
            const productId = this.getAttribute('data-product-id');
            const productName = this.getAttribute('data-product-name');
            
            // Remplir les informations de la modale de suppression
            if (productNameToDelete) {
                productNameToDelete.textContent = productName;
            }
            
            // Configurer le formulaire de suppression
            deleteForm.action = `/admin/products/delete?id=${productId}`;
            deleteProductToken.value = '{{ csrf_token('delete_product') }}';
            
            // Afficher la modale de suppression
            deleteModal.classList.remove('hidden');
        });
    });
    
    // Ouvrir la modale d'ajout de produit
    if (openAddProductModal) {
        openAddProductModal.addEventListener('click', function() {
            addModal.classList.remove('hidden');
            
            // Réinitialiser le formulaire d'ajout de produit
            const addProductForm = document.getElementById('addProductForm');
            if (addProductForm) {
                addProductForm.reset();
            }
            
            // S'assurer que la date d'ajout est définie à aujourd'hui
            const dateField = document.getElementById('newProductDateAdded');
            if (dateField) {
                const today = new Date();
                const formattedDate = today.toISOString().split('T')[0];
                dateField.value = formattedDate;
            }
        });
    }
    
    // Fermer la modale d'ajout avec le bouton X
    if (closeAddModal) {
        closeAddModal.addEventListener('click', function() {
            addModal.classList.add('hidden');
        });
    }
    
    // Fermer la modale d'ajout avec le bouton Annuler
    if (cancelAdd) {
        cancelAdd.addEventListener('click', function() {
            addModal.classList.add('hidden');
        });
    }
    
    // Fermer la modale de suppression avec le bouton Annuler
    if (cancelDeleteProduct) {
        cancelDeleteProduct.addEventListener('click', function() {
            deleteModal.classList.add('hidden');
        });
    }
    
    // Fermer les modales en cliquant à l'extérieur
    window.addEventListener('click', function(event) {
        if (event.target === addModal) {
            addModal.classList.add('hidden');
        }
        if (event.target === deleteModal) {
            deleteModal.classList.add('hidden');
        }
    });
});
	</script>
{% endblock %}
