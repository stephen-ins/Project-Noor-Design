{% extends 'base.admin.html.twig' %}

{% block title %}Noor Design | Admin
{% endblock %}

{# AFFICHAGE DE LA PAGE ADMINISTRATION DU SITE --> PRODUITS #}

{% block content %}
	<!-- Main content -->
	<main
		class="flex-1 p-6">
		<!-- Header -->
		<div class="flex justify-between items-center border-b pb-4 mb-6">
			<h1 class="text-2xl font-semibold">Gestion des Produits</h1>
			<button id="openAddProductModal" class="bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded flex items-center shadow-sm transition duration-150 ease-in-out">
				<i class="bi bi-plus mr-2"></i>
				Ajouter un produit
			</button>
		</div>

		<!-- Filtre de recherche -->
		<div class="bg-white p-4 rounded-lg shadow-sm mb-6">
			<div class="flex flex-wrap gap-4">
				<div class="flex-1 min-w-[200px]">
					<input type="text" placeholder="Rechercher un produit..." class="w-full px-4 py-2 border rounded"/>
				</div>
				<div class="w-40">
					<select class="w-full px-4 py-2 border rounded">
						<option value="">Catégorie</option>
						{% for category in categories %}
							<option value="{{ category.id }}">{{ category.nom }}</option>
						{% endfor %}
					</select>
				</div>
				<div class="w-40">
					<select class="w-full px-4 py-2 border rounded">
						<option value="">Statut</option>
						<option value="en_stock">En stock</option>
						<option value="epuise">Épuisé</option>
					</select>
				</div>
				<button class="bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded">
					Filtrer
				</button>
			</div>
		</div>

		<!-- Message d'erreur ou de succès pour ajout, modification ou suppression -->
		{% if app.session.flashBag.has('success') %}
			<div class="bg-green-100 text-green-800 p-4 rounded-lg mb-6">
				{{ app.session.flashBag.get('success')[0] }}
			</div>
		{% endif %}
		{% if app.session.flashBag.has('error') %}
			<div class="bg-red-100 text-red-800 p-4 rounded-lg mb-6">
				{{ app.session.flashBag.get('error')[0] }}
			</div>
		{% endif %}


		<!-- Tableau des produits -->
		<div class="bg-white rounded-lg shadow-sm overflow-hidden">
			<table class="w-full text-left">
				<thead class="bg-gray-100 border-b">
					<tr>
						<th class="px-2 py-4">P1</th>
						<th class="px-2 py-4">P2</th>
						<th class="px-2 py-4">P3</th>
						<th class="px-1 py-2">ID</th>
						<th class="px-1 py-2">Nom</th>
						<th class="px-1 py-2">Catégorie</th>
						<th class="px-1 py-2">Description</th>
						<th class="px-1 py-2">Matière</th>
						<th class="px-1 py-2">Taille</th>
						<th class="px-1 py-2">Poids</th>
						<th class="px-1 py-2">Prix</th>
						<th class="px-1 py-2">Statut</th>
						<th class="px-1 py-2">Stock</th>
						<th class="px-1 py-2">Date d'ajout</th>
						<th class="px-1 py-2">Actions</th>
					</tr>
				</thead>
				<tbody>
					<!-- Creation des produits par tour de boucle -->
					{% if products is defined and products|length > 0 %}
						{% for product in products %}
							<tr
								class="border-b hover:bg-gray-50">
								{# image 1 #}
								<td class="px-1 py-1 text-center">
									<img src="{{ asset('uploads/products/' ~ product.image) }}" alt="{{ product.nom }}" class="w-12 h-12 object-cover rounded mx-auto"/>
								</td>
								{# image 2 #}
								<td class="px-1 py-1 text-center">
									{% if product.additionalImages is defined and product.additionalImages|length > 0 %}
										<img src="{{ asset('uploads/products/' ~ product.additionalImages[0]) }}" alt="{{ product.nom }}" class="w-12 h-12 object-cover rounded mx-auto"/>
									{% else %}
										<span class="text-gray-400">Aucune</span>
									{% endif %}
								</td>
								{# image 3 #}
								<td class="px-1 py-1 text-center">
									{% if product.additionalImages is defined and product.additionalImages|length > 1 %}
										<img src="{{ asset('uploads/products/' ~ product.additionalImages[1]) }}" alt="{{ product.nom }}" class="w-12 h-12 object-cover rounded mx-auto"/>
									{% else %}
										<span class="text-gray-400">Aucune</span>
									{% endif %}
								</td>


								<td class="px-1 py-2 text-danger">{{ product.id }}</td>
								<td class="px-1 py-2 font-medium">{{ product.nom }}</td>
								<td class="px-1 py-2">{{ product.categorie.nom }}</td>
								<td class="px-1 py-2">
									{% if product.description is defined and product.description is not null %}
										{{ product.description|u.truncate(30, '...') }}
									{% else %}
										<span class="text-gray-400">Aucune description</span>
									{% endif %}
								</td>
								<td class="px-1 py-2">{{ product.materiaux }}</td>
								<td class="px-1 py-2">{{ product.taille }}</td>
								<td class="px-1 py-2">{{ product.poids }}
									g</td>
								<td class="px-1 py-2">{{ product.prix }}
									€</td>
								<td class="px-1 py-2">
									{% if product.stock > 0 %}
										<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs">En stock</span>
									{% else %}
										<span class="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs">Épuisé</span>
									{% endif %}
								</td>
								<td class="px-1 py-2">{{ product.stock }}</td>
								<td class="px-1 py-2">{{ product.dateAjout|date('d/m/Y') }}</td>

								{# Dans la colonne actions du tableau des produits #}
								<td class="px-1 py-2">
									<div class="flex space-x-2">
										<a href="{{ path('app_admin_products_edit', {'id': product.id}) }}" class="text-blue-600 hover:text-blue-800">
											<i class="bi bi-pencil"></i>
										</a>

										<button type="button" class="text-red-600 hover:text-red-800 delete-product-btn" data-product-id="{{ product.id }}" data-product-name="{{ product.nom }}">
											<i class="bi bi-trash"></i>
										</button>
									</div>
								</td>
							</tr>
						{% endfor %}
					{% endif %}
				</tbody>
			</table>

			{# Pagination du tableau #}
			<div class="flex justify-between items-center border-t p-4 bg-gray-50">
				<div class="text-sm text-gray-600">Affichage de 1 à 10 sur 50 produits</div>
				<div class="flex space-x-2">
					<button class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded">Précédent</button>
					<button class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded">Suivant</button>
				</div>
			</div>
		</div>

		<!-- Modale d'ajout de produit -->
		<div id="addProductModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
			<div class="bg-white rounded-lg shadow-lg w-4/5 h-4/5 mx-auto overflow-auto">
				<div class="sticky top-0 bg-white border-b px-6 py-3 flex justify-between items-center">
					<h3 class="text-xl font-semibold">Ajouter un nouveau produit</h3>
					<button id="closeAddModal" class="text-gray-500 hover:text-gray-700">
						<i class="bi bi-x-lg"></i>
					</button>
				</div>
				<div class="p-6">
					{# Formulaire Symfony pour l'ajout #}
					{{ form_start(formProduct, {'attr': {'id': 'addProductForm', 'action': path('app_admin_products_add')}}) }}
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4"> <div class="col-span-1 md:col-span-2">
							<div class="mb-4 flex items-center">
								<div>
									<label class="block text-sm font-medium text-gray-700 mb-1">Image principale</label>
									{{ form_widget(formProduct.image, {'attr': {'class': 'w-full text-sm', 'accept': 'image/*', 'id': 'newProductImage'}}) }}
									{{ form_errors(formProduct.image) }}
								</div>
							</div>
						</div>

						{# Bloc images additionnelles #}
						<div class="col-span-1 md:col-span-2">
							<label class="block text-sm font-medium text-gray-700 mb-1">Images additionnelles (2 & 3)</label>
							{{ form_widget(formProduct.additionalImages, {'attr': {'class': 'w-full text-sm', 'accept': 'image/*', 'multiple': true, 'id': 'newProductAdditionalImages'}}) }}
							<small class="text-gray-500">Vous pouvez sélectionner jusqu'à 2 images additionnelles en même temps</small>
							{{ form_errors(formProduct.additionalImages) }}
						</div>

						{# Champs du formulaire #}
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Nom du produit</label>
							{{ form_widget(formProduct.nom, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductName'}}) }}
							{{ form_errors(formProduct.nom) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Catégorie</label>
							{{ form_widget(formProduct.categorie, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductCategory'}}) }}
							{{ form_errors(formProduct.categorie) }}
						</div>
						<div class="col-span-1 md:col-span-2">
							<label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
							{{ form_widget(formProduct.description, {'attr': {'rows': 4, 'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductDescription'}}) }}
							{{ form_errors(formProduct.description) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Matière</label>
							{{ form_widget(formProduct.materiaux, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductMaterial'}}) }}
							{{ form_errors(formProduct.materiaux) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Taille</label>
							{{ form_widget(formProduct.taille, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductSize'}}) }}
							{{ form_errors(formProduct.taille) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Poids (Grammes)</label>
							{{ form_widget(formProduct.poids, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductWeight', 'placeholder': 'Poids en grammes'}}) }}
							{{ form_errors(formProduct.poids) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Prix (€)</label>
							{{ form_widget(formProduct.prix, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductPrice', 'min': 0, 'step': 0.01 }}) }}
							{{ form_errors(formProduct.prix) }}
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">Stock</label>
							{{ form_widget(formProduct.stock, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductStock', 'min': 0 , 'placeholder': 'Insérer le stock actuel'}}) }}
							{{ form_errors(formProduct.stock) }}
						</div>


						{# Date d ajout en masque #}
						<div class="hidden">
							<label class="block text-sm font-medium text-gray-700 mb-1">Date d'ajout</label>
							{{ form_widget(formProduct.date_ajout, {'attr': {'class': 'w-full px-3 py-2 border rounded', 'id': 'newProductDateAdded'}}) }}
							{{ form_errors(formProduct.date_ajout) }}
						</div>


						<div class="flex justify-center w-full space-x-3 border-t pt-4 bottom-0 bg-white">
							<button type="button" id="cancelAdd" class="px-4 py-2 border rounded hover:bg-gray-100">
								Annuler
							</button>
							<button type="submit" class="px-4 py-2 bg-amber-600 text-white rounded hover:bg-amber-700">
								Ajouter le produit
							</button>
						</div>

						{{ form_end(formProduct) }}
					</div>
				</div>
			</div>
		</div>

		<!-- Modale de suppression de produit -->
		<div id="deleteProductModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 hidden flex items-center justify-center z-50">
			<div class="bg-white rounded-lg shadow-lg p-6 max-w-md mx-auto">
				<div class="text-center">
					<h3 class="text-xl font-semibold mb-4">Confirmer la suppression</h3>
					<p class="mb-6">Êtes-vous sûr de vouloir supprimer le produit "<span id="productNameToDelete"></span>" ? Cette action est irréversible.</p>

					<form id="deleteProductForm" method="POST" action="{{ path('app_admin_products_delete') }}">
						<input type="hidden" name="_token" id="deleteProductToken" value="{{ csrf_token('delete_product') }}">

						<div class="flex justify-center space-x-4">
							<button type="button" id="cancelDeleteProduct" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded">
								Annuler
							</button>
							<button type="submit" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded">
								Supprimer
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>

	</main>
{% endblock %}
{% block javascripts %}
	{{ parent() }}
	<script>
		document.addEventListener('DOMContentLoaded', function () {
    // Récupération des éléments de la modale d'édition
    const editModal = document.getElementById('editProductModal');
    const closeEditModal = document.getElementById('closeEditModal');
    const cancelEdit = document.getElementById('cancelEdit');
    const editButtons = document.querySelectorAll('.edit-product-btn');
    const editForm = document.getElementById('editProductForm');
    
    // Récupération des éléments de la modale d'ajout
    const addModal = document.getElementById('addProductModal');
    const openAddProductModal = document.getElementById('openAddProductModal');
    const closeAddModal = document.getElementById('closeAddModal');
    const cancelAdd = document.getElementById('cancelAdd');
    
    // Récupération des éléments de la modale de suppression
    const deleteModal = document.getElementById('deleteProductModal');
    const cancelDeleteProduct = document.getElementById('cancelDeleteProduct');
    const deleteButtons = document.querySelectorAll('.delete-product-btn');
    const deleteForm = document.getElementById('deleteProductForm');
    const productNameToDelete = document.getElementById('productNameToDelete');
    const deleteProductToken = document.getElementById('deleteProductToken');
    
    // Ajouter un écouteur d'événement à chaque bouton d'édition
    editButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Récupérer les données du produit depuis les attributs data-*
            const productId = this.getAttribute('data-product-id');
            
            // Remplir le formulaire avec les données du produit
            document.getElementById('productName').value = this.getAttribute('data-product-name');
            document.getElementById('productCategory').value = this.getAttribute('data-product-category');
            document.getElementById('productDescription').value = this.getAttribute('data-product-description');
            document.getElementById('productMaterial').value = this.getAttribute('data-product-materiaux');
            document.getElementById('productSize').value = this.getAttribute('data-product-taille');
            document.getElementById('productWeight').value = this.getAttribute('data-product-poids');
            document.getElementById('productPrice').value = this.getAttribute('data-product-prix');
            document.getElementById('productStock').value = this.getAttribute('data-product-stock');
            
            // Afficher l'image actuelle
            const productImage = this.getAttribute('data-product-image');
            if (productImage && productImage !== 'null') {
                const previewImage = document.getElementById('previewImage');
                previewImage.src = `/uploads/products/${productImage}`;
            }
            
            // Afficher les images additionnelles actuelles
            const additionalImagesPreview = document.getElementById('additionalImagesPreview');
            additionalImagesPreview.innerHTML = '';
            const additionalImagesData = this.getAttribute('data-product-additional-images');
            
            if (additionalImagesData && additionalImagesData !== 'null') {
                try {
                    const additionalImages = JSON.parse(additionalImagesData);
                    if (additionalImages && additionalImages.length > 0) {
                        additionalImages.forEach(image => {
                            const imgElement = document.createElement('img');
                            imgElement.src = `/uploads/products/${image}`;
                            imgElement.alt = 'Image additionnelle';
                            imgElement.className = 'w-12 h-12 object-cover rounded';
                            additionalImagesPreview.appendChild(imgElement);
                        });
                    }
                } catch (e) {
                    console.error('Erreur lors du parsing des images additionnelles:', e);
                }
            }
            
            // Modifier l'action du formulaire pour l'édition
            editForm.action = `/admin/products?id=${productId}`;
            
            // Ajouter le champ pour indiquer que c'est une édition
            let hiddenInputId = editForm.querySelector('input[name="edit_product_id"]');
            if (!hiddenInputId) {
                hiddenInputId = document.createElement('input');
                hiddenInputId.type = 'hidden';
                hiddenInputId.name = 'edit_product_id';
                editForm.appendChild(hiddenInputId);
            }
            hiddenInputId.value = productId;
            
            // Ajouter un token CSRF
            if (!document.getElementById('edit_csrf_token')) {
                const csrfToken = document.createElement('input');
                csrfToken.type = 'hidden';
                csrfToken.name = '_token';
                csrfToken.id = 'edit_csrf_token';
                csrfToken.value = '{{ csrf_token('edit_product') }}';
                editForm.appendChild(csrfToken);
            }
            
            // Afficher la modale d'édition
            editModal.classList.remove('hidden');
        });
    });
    
    // Ajouter un écouteur d'événement à chaque bouton de suppression
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Récupérer les données du produit depuis les attributs data-*
            const productId = this.getAttribute('data-product-id');
            const productName = this.getAttribute('data-product-name');
            
            // Remplir les informations de la modale de suppression
            if (productNameToDelete) {
                productNameToDelete.textContent = productName;
            }
            
            // Configurer le formulaire de suppression
            deleteForm.action = `/admin/products/delete?id=${productId}`;
            deleteProductToken.value = '{{ csrf_token('delete_product') }}';
            
            // Afficher la modale de suppression
            deleteModal.classList.remove('hidden');
        });
    });
    
    // Fermer la modale d'édition avec le bouton X
    if (closeEditModal) {
        closeEditModal.addEventListener('click', function() {
            editModal.classList.add('hidden');
        });
    }
    
    // Fermer la modale d'édition avec le bouton Annuler
    if (cancelEdit) {
        cancelEdit.addEventListener('click', function() {
            editModal.classList.add('hidden');
        });
    }
    
    // Ouvrir la modale d'ajout de produit
    if (openAddProductModal) {
        openAddProductModal.addEventListener('click', function() {
            addModal.classList.remove('hidden');
            
            // Réinitialiser le formulaire d'ajout de produit
            const addProductForm = document.getElementById('addProductForm');
            if (addProductForm) {
                addProductForm.reset();
            }
            
            // S'assurer que la date d'ajout est définie à aujourd'hui
            const dateField = document.getElementById('newProductDateAdded');
            if (dateField) {
                const today = new Date();
                const formattedDate = today.toISOString().split('T')[0];
                dateField.value = formattedDate;
            }
        });
    }
    
    // Fermer la modale d'ajout avec le bouton X
    if (closeAddModal) {
        closeAddModal.addEventListener('click', function() {
            addModal.classList.add('hidden');
        });
    }
    
    // Fermer la modale d'ajout avec le bouton Annuler
    if (cancelAdd) {
        cancelAdd.addEventListener('click', function() {
            addModal.classList.add('hidden');
        });
    }
    
    // Fermer la modale de suppression avec le bouton Annuler
    if (cancelDeleteProduct) {
        cancelDeleteProduct.addEventListener('click', function() {
            deleteModal.classList.add('hidden');
        });
    }
    
    // Fermer les modales en cliquant à l'extérieur
    window.addEventListener('click', function(event) {
        if (event.target === editModal) {
            editModal.classList.add('hidden');
        }
        if (event.target === addModal) {
            addModal.classList.add('hidden');
        }
        if (event.target === deleteModal) {
            deleteModal.classList.add('hidden');
        }
    });
});
	</script>
{% endblock %}
